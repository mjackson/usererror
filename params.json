{"body":"UserError is a base constructor (i.e. \"class\") that makes JavaScript errors on V8 a lot more useful. Errors built using this class have the following benefits:\r\n\r\n  - They are easily subclassed\r\n  - They are nestable (see below)\r\n\r\n## Installation\r\n\r\nInstall this package using [npm](http://npmjs.org):\r\n\r\n    $ npm install usererror\r\n\r\nYou are also free to [browse or download the source](https://github.com/mjijackson/error).\r\n\r\n## Usage\r\n\r\nThe simplest usage for this class is:\r\n\r\n```javascript\r\nvar UserError = require('usererror');\r\n\r\ntry {\r\n  throw new UserError('Kaboom!');\r\n} catch (e) {\r\n  console.log(e.message);\r\n}\r\n```\r\n\r\nErrors are nestable, so an error can have a reference to another error that caused it. This is useful when you'd like to throw a high level error that was actually caused by some lower level error. The error that was the cause is used as the second argument to the constructor.\r\n\r\nIn the example below, we define our own error class `LoginFailedError` that inherits from `UserError`. An instance of this class is passed to the `loginUser` callback when it fails for some reason. Inside `loginUser` we try and connect to the database. In reality, we could be doing any number of things that may ultimately cause an error (e.g. reading from a flat file of user data, validating the user id, etc.). However, we want callers to know that `loginUser` will always return a `LoginFailedError` if it fails, and not some other error.\r\n\r\nThe solution is to wrap any other error in a `LoginFailedError` before passing it back up the callback chain. This allows us to preserve the full stack trace of the error (in the `fullStack` property) while giving callers a reasonable expectation for what class(es) of errors they can expect.\r\n\r\nNote: The `stack` property still works as you would expect, and only contains the stack trace for the error one level deep.\r\n\r\n```javascript\r\nvar util = require('util');\r\nvar UserError = require('usererror');\r\n\r\nfunction LoginFailedError(cause) {\r\n  UserError.call(this, 'Login failed', cause);\r\n}\r\n\r\nutil.inherits(LoginFailedError, UserError);\r\n\r\nfunction loginUser(userId, callback) {\r\n  connectToDatabase(function (err, db) {\r\n    if (err) {\r\n      callback(new LoginFailedError(err));\r\n    }\r\n\r\n    // Login the user.\r\n  });\r\n}\r\n\r\nloginUser(myUserId, function (err) {\r\n  console.log(err.fullStack); // Recursive stack trace.\r\n  console.log(err.stack); // Single-level stack trace.\r\n});\r\n```\r\n\r\n## Tests\r\n\r\nRun the tests with [mocha](http://visionmedia.github.com/mocha/):\r\n\r\n    $ mocha test\r\n\r\n## License\r\n\r\nCopyright 2012 Michael Jackson\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nThe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and non-infringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.\r\n","google":"","name":"UserError","tagline":"A base class for V8 JavaScript errors","note":"Don't delete this file! It's used internally to help with page regeneration."}